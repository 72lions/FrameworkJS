
{ "Results":[{"Title":"CBS 60 minutes - Fi - CBS","Content":"<p><a href=\"http:\/\/f-i.com\" title=\"Fantasy Interactive\" target=\"_blank\">Fi<\/a> and <a href=\"http:\/\/cbsnews.com\" title=\"CBS News\" target=\"_blank\">cbsnews.com<\/a> worked together and created an interactive Chrome application for pushing video content to everyone.<\/p>\r\n\r\n<p>The entire application was created with HTML5 and CSS3. I was one of the 5 developers that worked on this project, mainly building some of the different sections of the application.<\/p>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/cbs0.jpg\" alt=\"CBS 60 Minutes - Resent\" title=\"CBS 60 Minutes - Recent\" width=\"1066\" height=\"789\" class=\"alignnone size-full wp-image-1016\" \/>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/cbs1.jpg\" alt=\"CBS 60 Minutes - Video Player\" title=\"CBS 60 Minutes - Video Player\" width=\"1067\" height=\"789\" class=\"alignnone size-full wp-image-1017\" \/>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/cbs2.jpg\" alt=\"CBS 60 Minutes - Flyout\" title=\"CBS 60 Minutes - Flyout\" width=\"1065\" height=\"792\" class=\"alignnone size-full wp-image-1018\" \/>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/cbs3.jpg\" alt=\"CBS 60 Minutes - Correspondents\" title=\"CBS 60 Minutes - Correspondents\" width=\"1063\" height=\"791\" class=\"alignnone size-full wp-image-1019\" \/>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/cbs4.jpg\" alt=\"CBS 60 Minutes - Correspondent\" title=\"CBS 60 Minutes - Correspondent\" width=\"1064\" height=\"796\" class=\"alignnone size-full wp-image-1020\" \/>\r\n\r\n","Slug":"cbs-60-minutes-fi-cbs","Link":"http:\/\/72lions.com\/?p=1015","PublishDate":"2012-01-15 16:40:11","Creator":"1","Description":"Fi and cbsnews.com worked together and created an interactive Chrome application for pushing video content to everyone. The entire application was created with HTML5 and CSS3. I was one of the 5 developers that worked on this project, mainly building some of the different sections of the application.","Id":"1015","Thumbnail":{"File":"2012\/01\/cbs4.jpg","Data":{"width":"1064","height":"796","hwstring_small":"height='96' width='128'","file":"2012\/01\/cbs4.jpg","sizes":{"thumbnail":{"file":"cbs4-218x163.jpg","width":"218","height":"163"},"medium":{"file":"cbs4-456x341.jpg","width":"456","height":"341"},"large":{"file":"cbs4-700x523.jpg","width":"700","height":"523"},"post-thumbnail":{"file":"cbs4-1000x288.jpg","width":"1000","height":"288"},"large-feature":{"file":"cbs4-1000x288.jpg","width":"1000","height":"288"},"small-feature":{"file":"cbs4-401x300.jpg","width":"401","height":"300"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":""}}},"Meta":{"_edit_last":"1","_edit_lock":"1326641926:1","dsq_thread_id":"20120115164833","showcase":"1","visit_link":"https:\/\/chrome.google.com\/webstore\/detail\/imjhdahelgojehmfmkmdfjcpfbglbfmj"},"Tags":["CSS","CSS3","HTML5","Javascript","Video Player"],"Categories":[{"Name":"CSS\/XHTML","Slug":"css-xhtml","Id":"10"},{"Name":"HTML5","Slug":"html5-portfolio","Id":"55"},{"Name":"Portfolio","Slug":"portfolio","Id":"7"}]},{"Title":"Redbull TV - Fi","Content":"<p>Redbull and Fi worked together to create a video portal, making the awesome archived video footage and also the live shows, available to everyone.<\/p>\r\n\r\n<p>I was responsible for implementing different components on the website and also creating an \"embed video\" framework.<\/p>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/redbulltv1.jpg\" alt=\"Redbull TV\" title=\"Redbull TV\" width=\"1118\" height=\"2347\" class=\"alignnone size-full wp-image-1005\" \/>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/redbulltv2.jpg\" alt=\"Redbull TV - Show\" title=\"Redbull TV - Show\" width=\"1440\" height=\"2124\" class=\"alignnone size-full wp-image-1006\" \/>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/redbulltv3.jpg\" alt=\"Redbull TV - Live\" title=\"Redbull TV - Live\" width=\"1440\" height=\"1728\" class=\"alignnone size-full wp-image-1007\" \/>","Slug":"redbull-tv-fi","Link":"http:\/\/72lions.com\/?p=1004","PublishDate":"2012-01-15 16:25:12","Creator":"1","Description":"Redbull and Fi worked together to create a video portal, making the awesome archived video footage and also the live shows, available to everyone. I was responsible for implementing different components on the website and also creating an \"embed video\" framework.","Id":"1004","Thumbnail":{"File":"2012\/01\/webtv.jpg","Data":{"width":"610","height":"343","hwstring_small":"height='71' width='128'","file":"2012\/01\/webtv.jpg","sizes":{"thumbnail":{"file":"webtv-218x122.jpg","width":"218","height":"122"},"medium":{"file":"webtv-456x256.jpg","width":"456","height":"256"},"post-thumbnail":{"file":"webtv-610x288.jpg","width":"610","height":"288"},"large-feature":{"file":"webtv-610x288.jpg","width":"610","height":"288"},"small-feature":{"file":"webtv-500x281.jpg","width":"500","height":"281"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":""}}},"Meta":{"_edit_last":"1","_edit_lock":"1326641253:1","dsq_thread_id":"20120115163245","showcase":"1","visit_link":"http:\/\/redbull.tv"},"Tags":["Actionscript 3","CSS","Fi","Flash","HTML","MySQL","PHP"],"Categories":[{"Name":"CSS\/XHTML","Slug":"css-xhtml","Id":"10"},{"Name":"Flash","Slug":"flash-portfolio","Id":"54"},{"Name":"PHP - MySQL","Slug":"php-mysql","Id":"12"},{"Name":"Portfolio","Slug":"portfolio","Id":"7"}]},{"Title":"Civil War 150 - Fi - History.com","Content":"<p><a href=\"http:\/\/f-i.com\" title=\"Fantasy Interactive\" target=\"_blank\">Fi<\/a> and <a href=\"http:\/\/history.com\" title=\"History.com\" target=\"_blank\">History.com<\/a> created an interactive experience for the 150th Anniversary of the American Civil War.<\/p>\r\n\r\n<p>This was my first project when I started at Fi and I was part of a 2 member development team, working on different infographics.<\/p>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/civilwar1-700x382.jpg\" alt=\"Civil War 150 - History.com\" title=\"Civil War 150 - History.com\" width=\"584\" height=\"318\" class=\"alignnone size-large wp-image-996\" \/>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/civilwar2-697x500.jpg\" alt=\"Civil War 150 - History.com - Who they were\" title=\"Civil War 150 - History.com - Who they were\" width=\"584\" height=\"418\" class=\"alignnone size-large wp-image-998\" \/>\r\n\r\n<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/civilwar3-641x500.jpg\" alt=\"Civil War 150 - History.com - Paying for the war\" title=\"Civil War 150 - History.com - Paying for the war\" width=\"584\" height=\"455\" class=\"alignnone size-large wp-image-999\" \/>\r\n\r\n","Slug":"civil-war-150-history-com","Link":"http:\/\/72lions.com\/?p=995","PublishDate":"2012-01-15 16:12:59","Creator":"1","Description":"Fi and History.com created an interactive experience for the 150th Anniversary of the American Civil War. This was my first project when I started at Fi and I was part of a 2 member development team, working on different infographics.","Id":"995","Thumbnail":{"File":"2012\/01\/civilwar1.jpg","Data":{"width":"980","height":"536","hwstring_small":"height='70' width='128'","file":"2012\/01\/civilwar1.jpg","sizes":{"thumbnail":{"file":"civilwar1-218x119.jpg","width":"218","height":"119"},"medium":{"file":"civilwar1-456x249.jpg","width":"456","height":"249"},"large":{"file":"civilwar1-700x382.jpg","width":"700","height":"382"},"post-thumbnail":{"file":"civilwar1-980x288.jpg","width":"980","height":"288"},"large-feature":{"file":"civilwar1-980x288.jpg","width":"980","height":"288"},"small-feature":{"file":"civilwar1-500x273.jpg","width":"500","height":"273"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":""}}},"Meta":{"_edit_lock":"1326641312:1","_edit_last":"1","showcase":"1","dsq_thread_id":"20120115160835","visit_link":"http:\/\/www.history.com\/interactives\/civil-war-150"},"Tags":["Actionscript 3","Fi","Flash"],"Categories":[{"Name":"Flash","Slug":"flash-portfolio","Id":"54"},{"Name":"Portfolio","Slug":"portfolio","Id":"7"}]},{"Title":"Getting started with Git","Content":"<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2012\/01\/git.png\" alt=\"Git social coding\" title=\"Git social coding\" width=\"715\" height=\"446\" class=\"size-full wp-image-991\" \/>\r\n\r\n<p>Git is an open source version control system developed and maintained by the creator of the <strong>Linux Kernel Linus Torvalds<\/strong>.<\/p>\r\n\r\n<h2>Characteristics of Git<\/h2>\r\n<p>With Git each developer has a local copy of the repository and changes from one repository are copied\/pushed to another. <\/p>\r\n\r\n<p>Repositories can be published via HTTP, FTP, RSYNC or a Git protocol over a plain socket or SSH. <\/p>\r\n\r\n<p>Git is very fast and scalable and according to performance tests done by <strong>Mozilla<\/strong>, Git can be 100 times faster when fetching commit history from a local repository. Also, Git does not get slower as the commits history grows larger.<\/p>\r\n\r\n<p>Git history is stored in a way that the name of each commit depends upon the complete commit history leading up to that moment. <\/p>\r\n\r\n<p>Finally, The structure is similar to a hash tree.<\/p>\r\n\r\n<h2>Downloading Git<\/h2>\r\n<p>You can download Git from here: <a href=\"http:\/\/git-scm.com\/download\" target=\"_blank\" title=\"Download Git\">http:\/\/git-scm.com\/download<\/a><\/p>\r\n\r\n<h2>Configuring Git<\/h2>\r\n<p>After we installed Git we need to configure it. We can use the config sub-command. We need to configure the user\u2019s name, github username and email.<\/p>\r\n\r\n<pre>\r\ngit config --global user.name \"Firstname Lastname\"\r\ngit config --global user.email \"your_email@youremail.com\"\r\ngit config --global github.user username\r\n<\/pre>\r\n\r\n<h2>Creating a repository<\/h2>\r\n<p>There are two ways of creating a Git repository. One way is to initialize a new empty one. The second one is to create a repository from an existing one. This is called <strong>cloning<\/strong>.<\/p>\r\n\r\n<p>In the first way you have to create a directory and initialize Git.<\/p>\r\n\r\n<pre>\r\nmkdir working-copy\r\ncd working-copy\r\ngit init\r\n<\/pre>\r\n\r\n<p>What happened here is the following:<\/p>\r\n\r\n<ol><li>We create a folder called working-copy<\/li>\r\n<li>We go into that folder<\/li>\r\n<li>We run <strong>git init<\/strong> to create a local repository into the working-copy folder. The local repository is located inside the .git folder that the <strong>git init<\/strong> just created.<\/li>\r\n<\/ol>\r\n<p>In the second way you have to clone an existing repository.<\/p>\r\n\r\n<pre>\r\ngit clone \/Users\/user\/repo.git\r\n<\/pre>\r\n\r\n<p>This will create a new folder called repo and will checkout the working copy into that folder and will also create the local repository inside a .git folder. The .git folder is located inside the repo folder also.<\/p>\r\n\r\n<p><strong>Tips<\/strong><\/p>\r\n<ol><li>You can create a repository with no working copy by running the following command:<\/li>\r\n<\/ol>\r\n<pre>\r\ngit --bare init\r\n<\/pre>\r\n\r\n<p>This way developers can use it as a centralized repository and push\/pull (we'll discuss about pushing and pulling later).<\/p>\r\n\r\n<ol><li>If you want other developers to have a read\/write access to this repository then you need to make it a shared repository and also give them read\/write access to this directory and all subforders:<\/li>\r\n<\/ol>\r\n<pre>\r\n#Make the repo readable\r\nsudo chmod -R g+ws *\r\nsudo chgrp -R mygroup *\r\n\r\ngit config core.sharedRepository true\r\ngit config core.denyNonFastforwards true #we\u2019ll talk about fast forward later\r\n<\/pre>\r\n\r\n<ol><li>If you want to be able to push or pull changes to\/from a centralized repository then first you have to add it as a remote repository by typing:<\/li>\r\n<\/ol>\r\n<pre>\r\ngit remote add origin \/some\/folder\/project.git\r\n<\/pre>\r\n\r\n<p>This will register a remote repository with the name \"origin\". Now by typing <strong>git push origin<\/strong> you can push your changes on the centralized repository.<\/p>\r\n\r\n<h2>Creating snapshots<\/h2>\r\n<p>Git is all about composing and saving snapshots of your project and the comparing these snapshots. Git has an 'index' that acts as sort of a staging area for your snapshot. This way you can build snapshots from changed files in your working directory rather than having to commit all changes together.<\/p>\r\n\r\n<p>In the next step will examine how can we put a file into the staging area.<\/p>\r\n\r\n<pre>\r\ncd working-copy\r\necho \u2018This is a readme file\u2019 > README\r\ngit add .\r\ngit status\r\n\r\n#On branch master\r\n#Changes to be committed:\r\n#(use \"git reset HEAD ...\" to unstage)#\r\n#new file:   README#\r\n<\/pre>\r\n\r\n<p>So the file is added on the staging area. If we commit now, this file will be added in the repository. Always keep in mind that only the files in the staging are are commited.<\/p>\r\n\r\n<p>Now, if we change something in the file (without commiting it) and see the status again we\u2019ll see something different.<\/p>\r\n\r\n<pre>\r\n#On branch master\r\n#Changes to be committed:\r\n#(use \"git reset HEAD ...\" to unstage)\r\n#\r\n#new file:   README\r\n#\r\n#Changes not staged for commit:\r\n#(use \"git add ...\" to update what will be committed)\r\n#(use \"git checkout <s><\/s> ...\" to discard changes in working directory)\r\n#\r\n#modified:   README\r\n<\/pre>\r\n\r\n<p>This means that if we commit our snapshot now, the last changes won't be commited and that is because the file hasn't been commited at least once so it is not \"tracked\". We need to run git add to add the new changes on the staging area.<\/p>\r\n\r\n<p>So in a nutshell anything that you changed in a file that is not added will not be included in the commit and this means than you can craft your snapshots with a bit more precise than other source control systems.<\/p>\r\n\r\n<h2>Commiting<\/h2>\r\n<p>And now we can commit. But where are we commiting? There is a really handy command that shows the <strong>branch<\/strong> that we are working on.<\/p>\r\n\r\n<pre>\r\n#Show me the branches\r\n#on my local repository\r\ngit branch\r\nIssue247\r\nIssue248\r\nIssue300\r\nIssue301\r\n*master\r\n<\/pre>\r\n\r\n<p>The star indicates that we are working on the master branch. We also see that we have a few more branches.<\/p>\r\n\r\n<p>So if we commit now, we will be actually recording the current snapshot of the staging area into that branch.<\/p>\r\n\r\n<pre>\r\ngit commit -m \u2018A simple message\u2019\r\n#On branch master\r\n#Changes not staged for commit:\r\n#(use \"git add ...\" to update what will be committed)\r\n#(use \"git checkout  ...\" to discard changes in working directory)\r\n#\r\n#modified:   README\r\nno changes added to commit (use \"git add\" and\/or \"git commit -a\")\r\n<\/pre>\r\n\r\n<p>Ooops, what happened? It basically says that we have some changes that weren't added in to the staging area. Remember the <strong>git add .<\/strong> command? We need to run it again because of the reason we described before. But there is also the <strong>-a<\/strong> flag in the commit command that basically tells Git to run git add on any file that is \"tracked\" - that is, any file that was in your last commit and has been modified.<\/p>\r\n\r\n<p>So let's try it\u2026<\/p>\r\n\r\n<pre>\r\ngit commit -a -m \u2018A simple message\u2019\r\n[master f8d7e97] A simple message\r\n1 files changed, 1 insertions(+), 0 deletions(-)\r\n<\/pre>\r\n\r\n<p>Yeahhh, all the changes were committed!<\/p>\r\n\r\n<h2>Branches<\/h2>\r\n<p>Instant branching and merging are the most lethal features of Git.<\/p>\r\n\r\n<h3>Creating branches<\/h3>\r\n<p>Usually in Gitwe are creating branches when we want to do changes that are on a grouped fashion. For example, if we want to fix an issue (let's call it Issue 345) it's good practise to create a Issue345 branch.<\/p>\r\n\r\n<p>In some directory:<\/p>\r\n\r\n<pre>\r\necho \"I\u2019m the smarter man on the world\" > myfile.txt\r\ngit init\r\ngit add .\r\ngit commit -m \"Initial commit\"\r\n<\/pre>\r\n\r\n<p>We have created a Git repository with one commit and one file. Now type: <\/p>\r\n\r\n<pre>\r\ngit checkout -b Issue345\r\necho \"I\u2019m the stupidest man in the world\" > myfile.txt\r\ngit commit -a -m \"Another commit\"\r\n<\/pre>\r\n\r\n<p>The <strong>checkout<\/strong> command is used to switch between branches. But if we use the <strong>-b<\/strong> flag then Git will automatically create a branch called Issue345 and will switch to that branch.<\/p>\r\n\r\n<p>If we now go back to the master branch:<\/p>\r\n\r\n<pre>\r\ngit checkout master\r\n<\/pre>\r\n\r\n<p>we will notice that the myfile.txt will contain \"I\u2019m the smarter man on the world\". And if we go back to the Issue345 branch:<\/p>\r\n\r\n<pre>\r\ngit checkout Issue345\r\n<\/pre>\r\n\r\n<p>we will see that the myfile.txt will containt \"I\u2019m the stupidest man in the world\".<\/p>\r\n\r\n<p>You can switch between the two branches as much as you like and commit to each independently.<\/p>\r\n\r\n<h3>Getting your hands dirty<\/h3>\r\n<p>Let's say that you are working on the master branch and you need to go back 3 revisions to do a hot fix. <\/p>\r\n\r\n<pre>\r\ngit commit -a #commit your changes\r\ngit checkout HEAD~3\r\n<\/pre>\r\n\r\n<p>You can now start doing your changes to that revision and when you are ready you can type:<\/p>\r\n\r\n<pre>\r\ngit checkout master\r\n<\/pre>\r\n\r\n<p>to return to your original work. You will notice that any uncommited changes will be carried over. These changes won't be saved on that revision.<\/p>\r\n\r\n<p>But let's say that you want to keep the changes that you did to that revision. For this to happend you have to create a branch by using the snapshot that the code had 3 revisions ago. You do that by <strong>git checkout -b dirty<\/strong>.<\/p>\r\n\r\n<pre>\r\ngit commit -a #commit your changes\r\ngit checkout HEAD~3\r\n#so some changes\r\ngit checkout -b dirty\r\n<\/pre>\r\n\r\n<p>Now, before switching back to the master branch you need to commit all your changes. Whenever you want to return to the dirty changes branch you simply can type:<\/p>\r\n\r\n<pre>\r\ngit checkout dirty\r\n<\/pre>\r\n\r\n<p>After checking out an old state like we did before, Git automatically puts you in a new, unnamed branch, which can be named and saved with<\/p>\r\n\r\n<pre>\r\ngit checkout -b branchName\r\n<\/pre>\r\n\r\n<p>and that's what we did on the previous example.<\/p>\r\n\r\n<h3>Quick fixes<\/h3>\r\n<p>Let's say that we are working on something and we are told to drop everything and fix a bug that exists in commmit 4b6d\u2026 We need to commit everything that we are doing and create a new branch by taking the snapshot of the commit with id 4b6d\u2026<\/p>\r\n\r\n<pre>\r\ngit commit -a\r\ngit checkout -b fixes 4b6d\r\n<\/pre>\r\n\r\n<p>Then once we've fixed the bug:<\/p>\r\n\r\n<pre>\r\ngit commit -a -m \"Bug with scrollbar is fixed...\"\r\ngit checkout master # move back to the master branch\r\n<\/pre>\r\n\r\n<p>Right now we have two branches. The <strong>master<\/strong> and the <strong>fixes<\/strong>. We can merge these two branches together by typing:<\/p>\r\n\r\n<pre>\r\ngit merge fixes\r\n<\/pre>\r\n\r\n<h3>Uninterapted workflow<\/h3>\r\n<p>In most cases when you work on a website or an application you release version 1 and then you move on working on the features for release 2. With Git you can actually work with future releases even before release 1 is completed.<\/p>\r\n\r\n<p>Let\u2019s say you are working on Release 2 and you need to do some changes on Release 1 (which is not approved yet):<\/p>\r\n\r\n<pre>\r\ngit checkout release1  # Go back to Release 1.\r\n#do some changes\r\ngit commit -a        # Commit the changes.\r\ngit checkout release2   # Go back to Release 2.\r\ngit merge release1     # Merge in those changes.\r\n<\/pre>\r\n\r\n<p>Eventually, Release I is approved:<\/p>\r\n\r\n<pre>\r\ngit checkout release1  # Go back to Release 1.\r\n#Push the release\r\ngit merge release2      # Merge in Release 2.\r\ngit branch -d release2  # Delete \"release2\" branch.\r\n<\/pre>\r\n\r\n<p>You can do more stuff with branches.<\/p>\r\n\r\n<pre>\r\ngit branch -m master part2  # Rename \"master\" branch to \"release2\".\r\ngit branch master HEAD~7    # Create new \"master\", 7 commits upstream.\r\n<\/pre>\r\n\r\n<h2>Pushing \/ Pulling to \/ from a central repository<\/h2>\r\n<p>When we are done with our local changes, the next step would be to push the changes on the central repository. We can make git be aware of a central repository by running the following command.<\/p>\r\n\r\n<pre>\r\ngit remote add origin \/some\/folder\/project.git\r\n<\/pre>\r\n\r\n<p>All we have to do to push our master branch on the central repository is type:<\/p>\r\n\r\n<pre>\r\ngit push origin master\r\n<\/pre>\r\n\r\n<p>but you can always push a specific branch to the central repository:<\/p>\r\n\r\n<pre>\r\ngit push origin issue345 # we are pushing only the branch\r\n<\/pre>\r\n\r\n<p>If a colleague of yours creates a branch that you also want to work on all you have to do is pull it from the central repository and use the <strong>-t<\/strong> flag which stands for tracking. Now all changes pushed on that branch are available for you to pull.<\/p>\r\n\r\n<pre>\r\ngit pull -t origin\/issue200\r\n<\/pre>\r\n\r\n<h2>Work-flows<\/h2>\r\n\r\n<p>Depending on the project and on the team, work-flow vary. A few interesting work-flows can be found on these links.<\/p>\r\n\r\n<p><a href=\"http:\/\/sandofsky.com\/blog\/git-workflow.html\" target=\"_blank\" title=\"Git Workflow\">http:\/\/sandofsky.com\/blog\/git-workflow.html<\/a><br\/>\r\n<a href=\"http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/\" target=\"_blank\" title=\"A successful Git branching model\">http:\/\/nvie.com\/posts\/a-successful-git-branching-model\/<\/a><br\/>\r\n<a href=\"http:\/\/reinh.com\/blog\/2009\/03\/02\/a-git-workflow-for-agile-teams.html\" target=\"_blank\" title=\"Git Workflow for agile teams\">http:\/\/reinh.com\/blog\/2009\/03\/02\/a-git-workflow-for-agile-teams.html<\/a><\/p>","Slug":"getting-started-with-git","Link":"http:\/\/72lions.com\/?p=699","PublishDate":"2012-01-14 12:47:25","Creator":"1","Description":"Git is an open source version control system developed and maintained by the creator of the Linux Kernel Linus Torvalds. This guide helps you get started with Git, it shows you how to configure it and it also covers some more advanced techniques. ","Id":"699","Thumbnail":{"File":"2012\/01\/git.png","Data":{"width":"715","height":"446","hwstring_small":"height='79' width='128'","file":"2012\/01\/git.png","sizes":{"thumbnail":{"file":"git-218x135.png","width":"218","height":"135"},"medium":{"file":"git-456x284.png","width":"456","height":"284"},"large":{"file":"git-700x436.png","width":"700","height":"436"},"post-thumbnail":{"file":"git-715x288.png","width":"715","height":"288"},"large-feature":{"file":"git-715x288.png","width":"715","height":"288"},"small-feature":{"file":"git-480x300.png","width":"480","height":"300"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":""}}},"Meta":{"showcase":"1","_edit_lock":"1326641472:1","_edit_last":"1","dsq_thread_id":"20120116111730","_likes":"0"},"Tags":["Commit","Diff","Git","Github","Pull","Push","Source Control"],"Categories":[{"Name":"Blog","Slug":"blog","Id":"3"},{"Name":"Tit-beets of a spotless mind","Slug":"tit-beets-of-a-spotless-mind","Id":"8"}]},{"Title":"I joined Spotify!","Content":"<img class=\"alignnone size-full wp-image-804\" title=\"Spotify\" src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2011\/12\/Spotify.png\" alt=\"\" width=\"715\" height=\"446\" \/>\r\n\r\n<p>After 10 months working at Fi I felt that it was time to move on to something else, so in January 2012 I'll be joining the Spotify team. I love music (who doesn't) and being able to work on a product that has an affect on people's lives is something new and exciting to me. I know for sure that I'll learn a bunch of new things and I'll be pushed to become a better developer.<\/p>\r\n\r\n<p>Spotify is a great place to work. It's like a big family of really talented developers that share their dream of re-shaping the music industry, and have fun while they do it. I'm glad that I'll be part of the team.<\/p>\r\n\r\n<p>I also want to thank all the people that I worked with at Fi and are responsible for almost all of the projects at Fi. I learned a lot from you guys and I feel very lucky that I've been part of the team! So here it goes:<\/p>\r\n\r\n<p>Thank you Paul Lewis (<a href=\"https:\/\/twitter.com\/#aerotwist\" target=\"_blank\">@aerotwist<\/a>), David Lindkvist (<a href=\"https:\/\/twitter.com\/#ffdead\" target=\"_blank\">@ffdead<\/a>), Hj\u00f6rtur Hilmarsson (<a href=\"https:\/\/twitter.com\/#hjortureh\" target=\"_blank\">@hjortureh<\/a>), Jacek Zakowicz (<a href=\"https:\/\/twitter.com\/#JacekZ\" target=\"_blank\">@JacekZ<\/a>), Marco Barbosa (<a href=\"https:\/\/twitter.com\/#MarcoBarbosa\" target=\"_blank\">@MarcoBarbosa<\/a>), Filip Micha\u0142owski (<a href=\"https:\/\/twitter.com\/#fmmm\" target=\"_blank\">@fmmm<\/a>), Justin Windle (<a href=\"https:\/\/twitter.com\/#soulwire\" target=\"_blank\">@soulwire<\/a>), Matthew Wagerfield (<a href=\"https:\/\/twitter.com\/#mwagerfield\" target=\"_blank\">@mwagerfield<\/a>), Dennys Hess (<a href=\"https:\/\/twitter.com\/#inspiringclouds\" target=\"_blank\">@inspiringclouds<\/a>),\u00a0Claudio Guglieri (<a href=\"https:\/\/twitter.com\/#claudioguglieri\" target=\"_blank\">@claudioguglieri<\/a>),\u00a0Michael Stratton (<a href=\"https:\/\/twitter.com\/#stratto83\" target=\"_blank\">@stratto83<\/a>),\u00a0Johnny Michaelsen (<a href=\"https:\/\/twitter.com\/#johnny1402\" target=\"_blank\">@johnny1402<\/a>) and Gita Jaijee.<\/p>\r\n\r\n<p>You guys are LEGENDS!<\/p>\r\n\r\n&nbsp;","Slug":"i-joined-spotify","Link":"http:\/\/72lions.com\/?p=797","PublishDate":"2011-12-09 17:29:57","Creator":"1","Description":"After 10 months working at Fi I felt that it was time to move on to something else, so in January 2012 I'll be joining the Spotify team. I love music (who doesn't) and being able to work on a product that has an affect on people's lives is something new and exciting to me.","Id":"797","Thumbnail":{"File":"2011\/12\/Spotify.png","Data":{"width":"715","height":"446","hwstring_small":"height='79' width='128'","file":"2011\/12\/Spotify.png","sizes":{"thumbnail":{"file":"Spotify-218x135.png","width":"218","height":"135"},"medium":{"file":"Spotify-456x284.png","width":"456","height":"284"},"large":{"file":"Spotify-700x436.png","width":"700","height":"436"},"post-thumbnail":{"file":"Spotify-715x288.png","width":"715","height":"288"},"large-feature":{"file":"Spotify-715x288.png","width":"715","height":"288"},"small-feature":{"file":"Spotify-480x300.png","width":"480","height":"300"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":""}}},"Meta":{"_edit_last":"1","_edit_lock":"1326626551:1","dsq_thread_id":"156623873"},"Tags":[],"Categories":[{"Name":"Blog","Slug":"blog","Id":"3"}]},{"Title":"Router - Another History API manager","Content":"<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2011\/12\/HTML5-logo-700x472.jpg\" alt=\"\" title=\"HTML5-logo\" width=\"584\" height=\"393\" class=\"alignnone size-large wp-image-903\" \/>\r\n\r\n<p>Route Manager utilizes the History API and helps control browser history for websites and applications. It is not a framework, but it can be used by any framework for handling pop\/push events of the History API<\/p>\r\n\r\n<p>Router utilizes the History API and helps control browser history for websites and applications. It is not a framework, but it can be used by any framework for handling pop\/push events of the History API.<\/p>\r\n\r\n<p>You can also add listeners for different paths. This means that you can set a specific function to execute when you get the a specific path. e.x. execute function showAbout when you get the \/home\/about path. It also supports priority so if you have more than one function that listens for a specific path then you can set the order in which these functions will execute by setting a priority number.<\/p>\r\n\r\n<p>If your browsers doesn't support the History API then hashes will be used. e.x. #link1\/link11<\/p>\r\n\r\n<h3>This utility is tested on Firefox 4+ and Google Chrome 11+. It's still a work in progress so there might some bugs in different browsers.<\/h3>\r\n\r\n<b>Example<\/b>\r\n<pre>\r\nRouter.registerForEvent('pop', onPop);\r\nRouter.registerForPathChange('about', onAbout, 0);\r\nRouter.registerForPathChange('about', onAboutDifferent, 1);\r\nRouter.registerForPathChange('about\/history', onAboutHistory, 0);\r\n\r\n\/\/ The onPop, onAboutDifferent and onAbout will execute with that order\r\nRouter.push(null, 'Some title', 'about');\r\n\r\n\/\/ The onPop, onAboutHistory will execute\r\nRouter.push(null, 'Some title', 'about\/history');\r\n\r\nvar onAbout = function(state){\r\n    \/\/ This will be executed after the onAboutDifferent function\r\n    \/\/ some logic here\u2026\r\n};\r\n\r\nvar onAboutDifferent = function(state){\r\n    \/\/ This will be executed before the onAbout function\r\n    \/\/ some logic here\u2026\r\n};\r\n\r\nvar onAboutHistory = function(state){\r\n    \/\/ some logic here\u2026\r\n};\r\n\r\nvar onPop = function(state){\r\n    \/\/ It is executed whenever we get a onpopstate from the history api\r\n    \/\/ some logic here\u2026\r\n};\r\n<\/pre>","Slug":"router-manager-another-history-api-manager","Link":"http:\/\/72lions.com\/?p=898","PublishDate":"2011-12-08 12:06:38","Creator":"1","Description":"Route Manager utilizes the History API and helps control browser history for websites and applications. It is not a framework, but it can be used by any framework for handling pop\/push events of the History API","Id":"898","Thumbnail":{"File":"2011\/12\/HTML5-logo.jpg","Data":{"width":"994","height":"671","hwstring_small":"height='86' width='128'","file":"2011\/12\/HTML5-logo.jpg","sizes":{"thumbnail":{"file":"HTML5-logo-218x147.jpg","width":"218","height":"147"},"medium":{"file":"HTML5-logo-456x307.jpg","width":"456","height":"307"},"large":{"file":"HTML5-logo-700x472.jpg","width":"700","height":"472"},"post-thumbnail":{"file":"HTML5-logo-994x288.jpg","width":"994","height":"288"},"large-feature":{"file":"HTML5-logo-994x288.jpg","width":"994","height":"288"},"small-feature":{"file":"HTML5-logo-444x300.jpg","width":"444","height":"300"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":""}}},"Meta":{"_edit_lock":"1325542794:1","github":"https:\/\/github.com\/72lions\/Router","_edit_last":"1"},"Tags":["History API","HTML5","Javascript"],"Categories":[{"Name":"Blog","Slug":"blog","Id":"3"},{"Name":"Tit-beets of a spotless mind","Slug":"tit-beets-of-a-spotless-mind","Id":"8"}]},{"Title":"Sublime Text 2 - Tips","Content":"<h3>Download, install and set it up<\/h3>\r\n\r\n<p>I like to live in the edge so I installed the dev channel version that you can find here: <a href=\"http:\/\/www.sublimetext.com\/dev\" target=\"_blank\">http:\/\/www.sublimetext.com\/dev<\/a>. Since it's a dev version there might be some bugs but so far I must say that I hadn't any problem with it. Also, you are going to get an update every 1 or 2 days.<\/p>\r\n\r\n<p>After you download it and install it you should set it up. What I always like to do is go to \"Preferences -&gt; File Settings - Default\" and copy the entire file in the \"Preferences -&gt; File Settings - User\", but before I save I remove the font options. Be careful when you're changing the files not to mess up the structure. The next step is to change the following values:<\/p>\r\n\r\n<ul>\r\n\t<li><strong>translate_tabs_to_spaces<\/strong>: true\r\nConverts the tabs into spaces. The default value is 4 spaces but you can change it from the same file<\/li>\r\n\t<li><strong>draw_minimap_border<\/strong>: true\r\nDraws a border around the minimap which is on the right side of the code window<\/li>\r\n\t<li><strong>highlight_line<\/strong>: true\r\nHightlights the line that you are<\/li>\r\n\t<li><strong>caret_style<\/strong>: 'phase'\r\nChanges the animation on the caret<\/li>\r\n\t<li><strong>trim_trailing_white_space_on_save<\/strong>: true\r\nWhen you save all the whitespace is removed<\/li>\r\n\t<li><strong>tab_completion<\/strong>: true\r\nEnables autocompletion when you press tab<\/li>\r\n\t<li><strong>highlight_active_indent_guide<\/strong>: true\r\nHightlights the indent guide of the element that you are in<\/li>\r\n\t<li><strong>find_selected_text<\/strong>: true\r\nWhen you press Cmd+F or Ctrl+F then the selected text is already in the search field<\/li>\r\n<\/ul>\r\n\r\n<p>These are the settings that I like to use, but there are plenty more that you might want to change.<\/p>\r\n\r\n<h2>Features<\/h2>\r\n\r\n<h3>Goto Anything<\/h3>\r\n\r\n<p>Sublime Text 2 has a really useful functionality called \"Goto Anything\". It can be enabled with Ctrl+P (Windows) or Cmd+P (Mac OSX) and what it does is basically find and open files inside your project. You just have to type some keywords and it will show you a list of files containing these keywords. It's smart though. It will order the results based on popularity, which means that the files that you open more frequently will be already selected inside the results list.<\/p>\r\n\r\n<img class=\"alignnone size-full wp-image-688\" title=\"Sublime Text 2 - Quick Search\" src=\"http:\/\/72lions.com\/wp-content\/uploads\/2011\/08\/quick-search.jpg\" alt=\"Sublime Text 2 - Quick Search\" width=\"714\" height=\"370\" \/>\r\n\r\n<h3>Distraction Free Mode<\/h3>\r\n\r\n<p>Another cool functionality is the Distraction Free Mode. It's a simple one but really useful. The application goes into\u00a0full screen\u00a0and your code is centered in the middle of the screen.<\/p>\r\n\r\n<img class=\"alignnone size-full wp-image-690\" title=\"Sublime Text 2 - Distraction Free Mode\" src=\"http:\/\/72lions.com\/wp-content\/uploads\/2011\/08\/distraction-free.jpg\" alt=\"Sublime Text 2 - Distraction Free Mode\" width=\"714\" height=\"370\" \/>\r\n\r\n<h3>Hide \/ Show files &amp; folders<\/h3>\r\n\r\n<p>Another important feature that I find very useful is the ability to show or hide files and folders. For example, because for all of my projects I use Subversion, I get the annoying .svn folders inside my projects. Hiding them with Sublime Text 2 is really easy. Just go to Preferences -&gt; Global Settings - Default and find these two keys:<\/p>\r\n\r\n<ul>\r\n\t<li>folder_exclude_patterns<\/li>\r\n\t<li>file_exclude_patterns<\/li>\r\n<\/ul>\r\n\r\n<p>These are arrays with files\/folders\/extensions that you want Sublime to hide and not to show in the sidebar. It also filters them out when searching with the \"<strong>Goto Anything<\/strong>\" functionality<\/p>\r\n\r\n<h2>Plugins<\/h2>\r\n\r\n<p>Sublime is really powerfull when it comes to plugins. A few of them that I love using are:<\/p>\r\n\r\n<h3>Package Control<\/h3>\r\n\r\n<p>Package control is a package manager for Sublime Text 2. You can automatically update all your packages, disable and install new ones really easy and fast.<\/p>\r\n\r\n<p><b>Installation<\/b><\/p>\r\n\r\n<p>You can install it from inside Sublime Text 2 by using the console. Open the console Ctrl+`, paste the following code and press Enter.<\/p>\r\n\r\n<pre>import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http:\/\/sublime.wbond.net\/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'<\/pre>\r\n\r\n<h3>Inc-Dec-Value (also available via Package Control)<\/h3>\r\n\r\n<p>With this plugin you can increase\/decrease numbers, dates, hex values, strings (upper,lower, capitalize). You can find more information here: <a href=\"https:\/\/github.com\/rmaksim\/Sublime-Text-2-Inc-Dec-Value\" title=\"Sublime Text 2 Inc-Dec-Value\"  target=\"_blank\">https:\/\/github.com\/rmaksim\/Sublime-Text-2-Inc-Dec-Value<\/a><\/p>\r\n\r\n<h3>Docblockr (also available via Package Control)<\/h3>\r\n\r\n<p>Docblockr is a package that helps you write JS and PHP documentation. Just go right before a function declaration, type \/** and press Enter. The plugin creates the documentation for you and by pressing tab you can jump between the descriptions and the parameters and change the text. For more information you can go here: <a href=\"https:\/\/github.com\/spadgos\/sublime-jsdocs\" title=\"Sublime Text 2 Docblockr\"  target=\"_blank\">https:\/\/github.com\/spadgos\/sublime-jsdocs<\/a><\/p>\r\n\r\n<h3>SublimeLinter (available via Package Control)<\/h3>\r\n\r\n<p>Sublime Linter is a plugin that shows you JSHint errors while you type. Really useful for writing good code. The only requirement is that you have node.js installed on your system.<\/p>\r\n\r\n<h3>Zencoding (also available via Package Control)<\/h3>\r\n\r\n<p>It allows you to write your html markup in a really fast way. For example if you write <\/p>\r\n\r\n<pre>div.mydiv&gt;ul#theul&gt;li*5&gt;a[href=\"http:\/\/mylink.com\"]+span<\/pre>\u00a0\r\n\r\n<p>and you press Tab you will get the following markup:<\/p>\r\n\r\n<pre>&lt;div class=\"mydiv\"&gt;\r\n  &lt;ul id=\"theul\"&gt;\r\n     &lt;li&gt;&lt;a href=\"http:\/\/mylink.com\"&gt;&lt;\/a&gt;&lt;span&gt;&lt;\/span&gt;&lt;\/li&gt;\r\n     &lt;li&gt;&lt;a href=\"http:\/\/mylink.com\"&gt;&lt;\/a&gt;&lt;span&gt;&lt;\/span&gt;&lt;\/li&gt;\r\n     &lt;li&gt;&lt;a href=\"http:\/\/mylink.com\"&gt;&lt;\/a&gt;&lt;span&gt;&lt;\/span&gt;&lt;\/li&gt;\r\n     &lt;li&gt;&lt;a href=\"http:\/\/mylink.com\"&gt;&lt;\/a&gt;&lt;span&gt;&lt;\/span&gt;&lt;\/li&gt;\r\n     &lt;li&gt;&lt;a href=\"http:\/\/mylink.com\"&gt;&lt;\/a&gt;&lt;span&gt;&lt;\/span&gt;&lt;\/li&gt;\r\n  &lt;\/ul&gt;\r\n&lt;\/div&gt;<\/pre>\r\n\r\n<p>You can download Zencoding from here: <a href=\"https:\/\/bitbucket.org\/sublimator\/sublime-2-zencoding\" target=\"_blank\">https:\/\/bitbucket.org\/sublimator\/sublime-2-zencoding<\/a> and you can read the documentation here: <a href=\"http:\/\/code.google.com\/p\/zen-coding\/\" target=\"_blank\">http:\/\/code.google.com\/p\/zen-coding\/<\/a>. There is also a <a title=\"Zen Coding Cheatsheet\" href=\"http:\/\/code.google.com\/p\/zen-coding\/downloads\/detail?name=ZenCodingCheatSheet.pdf\" target=\"_blank\">cheat sheet<\/a> that I found really usefull!<\/p>\r\n\r\n<p><strong>Installation:<\/strong> Installing plugins in Sublime is really easy. In this case you copy the Zencoding folder inside Sublime's Packages folder. In case that you extract the zip and you get just the files, first create the folder and then copy the files inside it.<\/p>\r\n\r\n<p>Lot's of thanks to <a href=\"http:\/\/twitter.com\/#!\/MarcoBarbosa\" target=\"_blank\">@MarcoBarbosa<\/a> for finding this.<\/p>\r\n\r\n<h3>JSLint<\/h3>\r\n\r\n<p>Another cool feature of Sublime Text 2 is that you can create python files and execute them from inside Sublime. When you save the .py file, Sublime automatically compiles it and all you have to do is executed it from the console. A good example is the creation of a build system for JSLinting your JS files. So in order to do that you need to download the following files <a href=\"https:\/\/github.com\/n00ge\/Sublime-Text-2-JSLint-Build\">https:\/\/github.com\/n00ge\/Sublime-Text-2-JSLint-Build<\/a>. Follow the instructions on how to install it.<\/p>\r\n\r\n<p>If you open the JavaScript (OSX).sublime-build you will see that the logic is really simple. All it does is execute a file on the filesystem and passing 2 parameters. The first one is the flag for processing the file and the second is the actual file. All the parsing happens automatically from the jsl file.<\/p>\r\n\r\nLot's of thanks to <a href=\"http:\/\/twitter.com\/#!\/ffdead\" target=\"_blank\">@ffdead<\/a> for finding this.\r\n<h3>Compressing &amp; Minifying<\/h3>\r\n\r\n<p>Most of the times when we want to deploy our website we want to have our JS files compressed. So I found another cool plugin for compressing your JS file.<\/p>\r\n\r\n<p>All you have to do is create a new file, name it CompressJS.py and save inside Sublime's Packages -&gt; User folder. Then add the following code inside the file:<\/p>\r\n\r\n<pre>import os\r\nimport sublime, sublime_plugin\r\nimport urllib, urllib2\r\n\r\n#view.run_command(\"compress\")\r\nclass CompressCommand(sublime_plugin.TextCommand):\r\ndef run(self, edit):\r\nfolder_name, file_name = os.path.split(self.view.file_name())\r\nsublime.status_message((\"Compressing %s...\") % file_name)\r\n\r\nregion = sublime.Region(0L, self.view.size())\r\nfile_string = self.view.substr(region)\r\n\r\nurl = 'http:\/\/refresh-sf.com\/yui\/'\r\nvalues = {\r\n'compresstext' : file_string,\r\n'type' : 'js',\r\n'redirect' : 'true' }\r\n\r\ndata = urllib.urlencode(values)\r\nreq = urllib2.Request(url, data)\r\nresponse = urllib2.urlopen(req)\r\nthe_page = response.read()\r\n\r\ncompressed_view = self.view.window().new_file()\r\ncompressed_view.insert(edit, 0, the_page)<\/pre>\r\n\r\n<p>This plugin uses an external website and sends to it all the code from inside the opened JS file. Then it creates a new tab and copies in all the data that it got from the website. So you can create your own service if you like that does all the things that you need to the code.<\/p>\r\n\r\n<p>In order to run the plugin you need to open the console and type <strong>view.run_command('compress');<\/strong><\/p>\r\n\r\n<h3>Snippets<\/h3>\r\n\r\n<p>Another really cool feature in Sublime is the ability to create Snippets and assign a combination of letters to them. For example let's say that you want (in Javascript) to type \/**m and then press tab to get this:<\/p>\r\n\r\n<pre>\/**\r\n* Describe what this method does\r\n* @private\r\n* @param {String|Object|Array|Boolean|Number} paramName Describe this parameter\r\n* @returns Describe what it returns\r\n* @type String|Object|Array|Boolean|Number\r\n* @author Thodoris Tsiridis\r\n*\/<\/pre>\r\n\r\n<p>All you have to do is create a file with any name but with the .tmSnippet inside Packages -&gt; Javascript folder. This folder must contain the following code:<\/p>\r\n\r\n<pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;!DOCTYPE plist PUBLIC \"-\/\/Apple Computer\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\"&gt;\r\n&lt;plist version=\"1.0\"&gt;\r\n    &lt;dict&gt;\r\n        &lt;key&gt;content&lt;\/key&gt;\r\n        &lt;string&gt;\/**\r\n            * ${1:Describe what this method does}\r\n            ${2: * @private }\r\n            ${3: * @param { ${4:String|Object|Array|Boolean|Number}\\} ${5:paramName} ${6:Describe this parameter}${7}} \r\n            * @returns ${8:Describe what it returns}\r\n            * @type ${9:String|Object|Array|Boolean|Number}\r\n            * @author ${10:Thodoris Tsiridis}\r\n            *\/\r\n        &lt;\/string&gt;\r\n        &lt;key&gt;name&lt;\/key&gt;\r\n        &lt;string&gt;Method&lt;\/string&gt;\r\n        &lt;key&gt;scope&lt;\/key&gt;\r\n        &lt;string&gt;source.js&lt;\/string&gt;\r\n        &lt;key&gt;tabTrigger&lt;\/key&gt;\r\n        &lt;string&gt;\/**m&lt;\/string&gt;\r\n        &lt;key&gt;uuid&lt;\/key&gt;\r\n        &lt;string&gt;17F51DD9-6CB7-4174-91E2-00E423A2190A&lt;\/string&gt;\r\n    &lt;\/dict&gt;\r\n&lt;\/plist&gt;<\/pre>\r\n<p>What you have here is basically an xml file containing key, string pairs. So in the <strong>string<\/strong> node following the key node with value <strong>content<\/strong> you should have the string\/code that you want to inject. Notice the ${1: Something} values. The number declares the tab stop and the text following \":\" is the default text. Keep in mind that if you use the $0 then this will be exit point of your tab stops. Then you have your <strong>tabTrigger<\/strong> key that holds the combination of characters that you need to type before pressing tab in order to get the content. The combination of characters are set in the <strong>string<\/strong> node following the tabTrigger node. Finally you have your <strong>uuid<\/strong> key where is used for storing a unique id. Again, the next <strong>string<\/strong> node should be a unique alphanumeric unique id.<\/p>\r\n\r\n<p>So in this example if you type \/**m and then you press tab you'll get that snippet. And if you continue pressing tab you will keep moving between tab stops.<\/p>\r\n<h3>I will keep finding new things for Sublime and I will also try to create my own plugins and build systems. So whenever I have something new I will post it here or in my twitter account.<\/h3>","Slug":"sublime-text-2-tips","Link":"http:\/\/www.72lions.com\/?p=682","PublishDate":"2011-08-26 14:57:51","Creator":"1","Description":"Why I started loving Sublime Text 2!","Id":"682","Thumbnail":{"File":"2011\/08\/sublime-text-2-quick-search.jpg","Data":{"width":"714","height":"370","hwstring_small":"height='66' width='128'","file":"2011\/08\/sublime-text-2-quick-search.jpg","sizes":{"thumbnail":{"file":"sublime-text-2-quick-search-218x112.jpg","width":"218","height":"112"},"medium":{"file":"sublime-text-2-quick-search-456x236.jpg","width":"456","height":"236"},"post-thumbnail":{"file":"sublime-text-2-quick-search-714x288.jpg","width":"714","height":"288"},"large-feature":{"file":"sublime-text-2-quick-search-714x288.jpg","width":"714","height":"288"},"small-feature":{"file":"sublime-text-2-quick-search-500x259.jpg","width":"500","height":"259"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":""}}},"Meta":{"_edit_last":"1","dsq_thread_id":"396624741","_likes":"0","_edit_lock":"1326237187:1"},"Tags":["ide","programming","sublime text 2"],"Categories":[{"Name":"Blog","Slug":"blog","Id":"3"},{"Name":"Tit-beets of a spotless mind","Slug":"tit-beets-of-a-spotless-mind","Id":"8"}]},{"Title":"Canvas Display List","Content":"<img class=\"alignnone size-large wp-image-675\" title=\"HTML5 Canvas Solar System\" src=\"http:\/\/www.72lions.com\/wp-content\/uploads\/2011\/07\/Screen-shot-2011-07-20-at-10.22.03-PM-715x446.png\" alt=\"HTML5 Canvas Solar System\" width=\"715\" height=\"446\" \/>\r\n\r\n<p>A few days ago we were talking with my talented\u00a0colleagues\u00a0\u00a0at Fi and we came to the conclusion that we need some kind of display list for canvas. You know, something similar to what AS3 has but much simpler. We didn't want some kind of complex logic. We needed to just be able to create an object, add\/remove children from it, hide\/show it, and scale\/move\/rotate it and with these changing propagating to the children.<\/p>\r\n\r\n<p>I've created a demo and I was inspired by <a title=\"CSS3 Solar System\" href=\"http:\/\/neography.com\/experiment\/circles\/solarsystem\/\" target=\"_blank\">Alex Giron's CSS3 Solar System<\/a>. I believe it's a good example for showing parent\/child's relations. You can find more examples if you download the code from Github.<\/p>","Slug":"canvas-display-list","Link":"http:\/\/www.72lions.com\/?p=667","PublishDate":"2011-07-16 12:18:08","Creator":"1","Description":"A few days ago we were talking with my talented colleagues  at Fi and we came to the conclusion that we need some kind of display list for canvas. We didn't want some kind of complex logic. We needed to just be able to create an object, add\/remove children from it, hide\/show it, and scale\/move\/rotate it with these changing propagating to the children.","Id":"667","Thumbnail":{"File":"2011\/07\/canvas-display-list.png","Data":{"width":"715","height":"446","hwstring_small":"height='79' width='128'","file":"2011\/07\/canvas-display-list.png","sizes":{"thumbnail":{"file":"canvas-display-list-218x135.png","width":"218","height":"135"},"medium":{"file":"canvas-display-list-456x284.png","width":"456","height":"284"},"post-thumbnail":{"file":"canvas-display-list-715x288.png","width":"715","height":"288"},"large-feature":{"file":"canvas-display-list-715x288.png","width":"715","height":"288"},"small-feature":{"file":"canvas-display-list-480x300.png","width":"480","height":"300"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":""}}},"Meta":{"_edit_last":"1","dsq_thread_id":"359927717","_likes":"0","_edit_lock":"1325542640:1","github":"https:\/\/github.com\/72lions\/CanvasDisplayList","demo":"http:\/\/experiments.72lions.com\/CanvasDisplayList\/solar-system\/index.html"},"Tags":["Canvas","Display list","HTML5","Javascript"],"Categories":[{"Name":"Blog","Slug":"blog","Id":"3"},{"Name":"Tit-beets of a spotless mind","Slug":"tit-beets-of-a-spotless-mind","Id":"8"}]},{"Title":"Cross-origin communication with HTML5","Content":"<img src=\"http:\/\/72lions.com:9001\/wp-content\/uploads\/2011\/12\/HTML5-logo.jpg\" alt=\"\" title=\"HTML5-logo\" width=\"994\" height=\"671\" class=\"alignnone size-full wp-image-903\" \/>\r\n\r\n<p>On this tutorial I am going to demonstrate how we can use the Communication API for Cross Document Messaging.<\/p>\r\n\r\n<p>Until now, if you wanted to communicate between iframes, tabs or windows you would have to do it with direct scripting. A script running in one page would try to change another document, but that might not be allowed due to security restrictions. With the Communication API and the postMessage we now have asynchronous message passing between Javascript contexts.<\/p>\r\n\r\n<p>As shown in the following example, it is very simple to send a message with the postMessage API.\r\n<pre lang=\"javascript\">somewindow.postMessage('This is a message', 'http:\/\/example.com');<\/pre>\r\nTo receive messages you have to listen for the 'message' event in the target pages. When a message arrives you get an object that contains information about the message. You can check the origin to see if it comes from a domain that you are interested in receiving messages, and then you can act accordingly. Listening for a message is really simple an it is shown in the next example.<\/p>\r\n\r\n<pre lang=\"javascript\">window.addEventListener('message', messageHandler, true);\r\n\r\nfunction messageHandler(e) {\r\n   \/\/Check the origin of the message\r\n   switch(e.origin) {\r\n      \/\/if it is the domain that we are listening from\r\n      case \"http:\/\/example.com\":\r\n         \/\/Do something with the e.data\r\n         alert(e.data);\r\n         break;\r\n      default:\r\n         \/\/Do nothing if the domain is not the one we are listening from\r\n   }\r\n}\r\n<\/pre>\r\n<p>Since the e.data is a string, we can send a single text or even a JSON object.<\/p>\r\n\r\n<h3>ORIGIN SECURITY<\/h3>\r\n\r\n<p>Cross Origin Communication identifies the sender by origin. This allows the receiver to ignore messages from domains that it doesn't trust. Origins are made up of a scheme, a host and a port. Keep in mind that the path is not included in the origin. So a page at http:\/\/example.com\/page1.html has the same origin with a page at http:\/\/example.com\/page2.html because only the path is changed. But http:\/\/example.com and https:\/\/example.com have a different origin because the scheme is different (http vs. https).<\/p>\r\n\r\n<h3>BE CAREFUL WITH EXTERNAL INPUT<\/h3>\r\n\r\n<p>You should avoid evaluating the e.data as markup. For example the following example is dangerous:<\/p>\r\n\r\n<pre lang=\"javascript\">\/\/e.data is evaluated as markup\r\nel.innerHTML = e.data;<\/pre>\r\n\r\nThat's why a better approach is the following:\r\n\r\n<pre lang=\"javascript\">\/\/e.data isn't evaluated as markup\r\nel.textContent = e.data;<\/pre>\r\n\r\n<h3>CHECKING FOR BROWSER SUPPORT<\/h3>\r\n\r\n<pre lang=\"javascript\">if(typeof window.postMessage === \"undefined\"){\r\n   alert('Your browser doesn't support postMessage');\r\n} else {\r\n   \/\/Do something\r\n}<\/pre>\r\n\r\n<h3>SENDING MESSAGES<\/h3>\r\n\r\n<p>The postMessage function get two arguments. The first one is the message and the second one is the intended target<\/p>\r\n\r\n<pre lang=\"javascript\">window.postMessage('Hello world...', 'http:\/\/example.com');<\/pre>\r\nIf you want to communicate with an iframe then the code above would change to something like that:\r\n<pre lang=\"javascript\">document.getElementsByTagName('iframe')[0].contentWindow.postMessage('Hello world...', 'http:\/\/example.com');<\/pre>\r\n\r\n<h3>LISTENING FOR MESSAGES<\/h3>\r\n\r\n<p>You can receive messages by listening for the message event on the recipient's window object. Then by checking the origin you can decide what to do with the message<\/p>\r\n\r\n<pre lang=\"javascript\">\r\n\/**\r\n* Handles the messave event\r\n*\/\r\nfunction messageHandler(e) {\r\n\r\n   \/\/Check the origin of the message\r\n   switch(e.origin) {\r\n      \/\/if it is the domain that we are listening from\r\n      case \"http:\/\/localhost\":\r\n      \/\/Do something with e.data\r\n         break;\r\n      default:\r\n\t\t\t\/\/Do nothing if the domain is not the one we are listening from\r\n   }\r\n}\r\n\r\n\/\/Bind events\r\nwindow.addEventListener('message', messageHandler, true);<\/pre>\r\n\r\n<h3>In the next tutorial I will be talking about the Cross-Origin XMLHttpRequest. Until then you can download a small app that I've created demonstrating the postMessage API.<\/h3>","Slug":"cross-origin-communication-with-html5","Link":"http:\/\/www.72lions.com\/?p=635","PublishDate":"2011-05-30 21:41:53","Creator":"1","Description":"On this tutorial I am going to demonstrate how we can use the Communication API for Cross Document Messaging.\r\n\r\nUntil now, if you wanted to communicate between iframes, tabs or windows you would have to do it with direct scripting. A script running in one page would try to change another document, but that might not be allowed due to security restrictions. With the Communication API and the postMessage we now have asynchronous message passing between Javascript contexts.","Id":"635","Thumbnail":{"File":"2011\/12\/HTML5-logo.jpg","Data":{"width":"994","height":"671","hwstring_small":"height='86' width='128'","file":"2011\/12\/HTML5-logo.jpg","sizes":{"thumbnail":{"file":"HTML5-logo-218x147.jpg","width":"218","height":"147"},"medium":{"file":"HTML5-logo-456x307.jpg","width":"456","height":"307"},"large":{"file":"HTML5-logo-700x472.jpg","width":"700","height":"472"},"post-thumbnail":{"file":"HTML5-logo-994x288.jpg","width":"994","height":"288"},"large-feature":{"file":"HTML5-logo-994x288.jpg","width":"994","height":"288"},"small-feature":{"file":"HTML5-logo-444x300.jpg","width":"444","height":"300"}},"image_meta":{"aperture":"0","credit":"","camera":"","caption":"","created_timestamp":"0","copyright":"","focal_length":"0","iso":"0","shutter_speed":"0","title":""}}},"Meta":{"_edit_last":"1","dsq_thread_id":"317959960","_likes":"0","_edit_lock":"1325542672:1","demo":"http:\/\/experiments.72lions.com\/CommunicationAPI\/index.html","download":"http:\/\/72lions.com\/download.php?file=CommunicationAPI%2Fexample.zip"},"Tags":["Communication API","HTML5","Javascript"],"Categories":[{"Name":"Blog","Slug":"blog","Id":"3"},{"Name":"HTML5","Slug":"html5","Id":"6"},{"Name":"Tit-beets of a spotless mind","Slug":"tit-beets-of-a-spotless-mind","Id":"8"}]},{"Title":"IE double margin problem","Content":"If you have a floating element with margin & IE doubles the margin, then just use display:inline or use drop the margin and use padding instead.","Slug":"ie-double-margin-problem","Link":"http:\/\/www.72lions.com\/?p=633","PublishDate":"2011-04-19 22:23:27","Creator":"1","Description":"If you have a floating element with margin & IE doubles the margin, then just use display:inline or use drop the margin and use padding instead.","Id":"633","Thumbnail":{"File":"","Data":null},"Meta":{"dsq_thread_id":"283745032","_edit_last":"1","_likes":"0","_edit_lock":"1325542714:1"},"Tags":["CSS","double margin","IE","problem"],"Categories":[{"Name":"Blog","Slug":"blog","Id":"3"},{"Name":"Tit-beets of a spotless mind","Slug":"tit-beets-of-a-spotless-mind","Id":"8"}]}]}